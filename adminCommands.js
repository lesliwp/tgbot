const { Markup } = require('telegraf');
const dbHandlers = require('./dbHandlers');
const config = require('../data/config.json');
const { mainKeyboard, generalCommands, adminCommands } = require('./keyboardConfig');

module.exports = function (bot) {
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.command('addbutton', (ctx) => {
    ctx.session.isAddingButton = true;
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.on('text', (ctx) => {
    if (ctx.session.isAddingButton) {
        const title = ctx.message.text;
        const command = title.toLowerCase().replace(/\s+/g, '_');

        dbHandlers.addNewButton(title, command, (err) => {
            if (err) {
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.');
                console.error(err);
            } else {
                ctx.reply('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
            }
        });

        ctx.session.isAddingButton = false;
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.command('deletebutton', (ctx) => {
    dbHandlers.getAllButtons((err, rows) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–æ–ø–æ–∫.');
            console.error(err);
            return;
        }

        if (rows.length === 0) {
            ctx.reply('–ö–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.');
            return;
        }

        const buttonsDB = rows.map(row => Markup.button.callback(row.title, `delete_${row.title}`));
        const keyboardDB = Markup.inlineKeyboard(buttonsDB);
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboardDB);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.action(/delete_(.+)/, (ctx) => {
    const titleToDelete = ctx.match[1];

    if (titleToDelete === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        ctx.reply('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".');
        return;
    }

    dbHandlers.deleteButton(titleToDelete, (err) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.');
            console.error(err);
        } else {
            ctx.reply(`–ö–Ω–æ–ø–∫–∞ "${titleToDelete}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
        }
    });
});


bot.action(/set_lang_(.+)/, (ctx) => {
    const selectedLang = ctx.match[1]; // 'ru' –∏–ª–∏ 'en'
    const userId = ctx.from.id;

    dbHandlers.setUserLanguage(userId, selectedLang, (err) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞.');
            return;
        }
        // –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        ctx.reply(selectedLang === 'ru' ? '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.' : 'Language is set to English.');
        // –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    });
});

};