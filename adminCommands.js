const { Markup } = require("telegraf");
const dbHandlers = require("./dbHandlers");
const of = require("./of");
const config = require("../data/config.json");
const {
  mainKeyboard,
  getMenuForLang,
  generalCommands,
  adminCommands,
} = require("./keyboardConfig");

module.exports = function (bot) {
    bot.command("addbutton", (ctx) => {
        ctx.session.isAddingButton = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:");
      });
      
      bot.on("text", async (ctx) => {
        if (ctx.session.isAddingButton) {
          const title = ctx.message.text;
          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ command –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤
          const command = of.generateRandomNumber(4);
      
          try {
            await dbHandlers.Buttons.addNewButton(title, command);
            ctx.reply(`–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. Command: ${command}`);
          } catch (err) {
            console.error(err);
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.");
          }
      
          ctx.session.isAddingButton = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        }
      });
      

      
      

  bot.command("deletebutton", async (ctx) => {
    try {
      const buttons = await dbHandlers.Buttons.getAllButtons();
      if (buttons.length === 0) {
        ctx.reply("–ö–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.");
        return;
      }

      const buttonsDB = buttons.map((button) =>
        Markup.button.callback(button.command, `delete_${button.command}`)
      );
      const keyboardDB = Markup.inlineKeyboard([buttonsDB]);
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", keyboardDB);
    } catch (err) {
      console.error(err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–æ–ø–æ–∫.");
    }
  });

  bot.action(/delete_(.+)/, async (ctx) => {
    const titleToDelete = ctx.match[1];

    if (titleToDelete === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      ctx.reply('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".');
      return;
    }

    try {
      await dbHandlers.Buttons.deleteButton(titleToDelete);
      ctx.reply(`–ö–Ω–æ–ø–∫–∞ "${titleToDelete}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
    } catch (err) {
      console.error(err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.");
    }
  });


  bot.action(/set_lang_(ru|en)/, async (ctx) => {
    const selectedLang = ctx.match[1]; // 'ru' –∏–ª–∏ 'en'
    const userId = ctx.from.id;
  
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await dbHandlers.Users.setUserLanguage(userId, selectedLang);
      const userProfile = await dbHandlers.Users.getUserProfile(userId);
  
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      const greetings = selectedLang === "ru" ? "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" : "English language set. Welcome!";
      ctx.reply(greetings, getMenuForLang(userProfile.lang, ctx.from.id.toString() === config.admin_id));
  
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      const profileMessage = `*${selectedLang === "ru" ? "–ü—Ä–∏–≤–µ—Ç" : "Hello"}* ${userProfile.name}\n` +
        `${selectedLang === "ru" ? "üí∞ *–ë–∞–ª–∞–Ω—Å:* " : "üí∞ *Balance:* "} \`${userProfile.balance.toFixed(2)}\`*$*\n` +
        `${selectedLang === "ru" ? "üîÑ *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* " : "üîÑ *Referals:* "} ${userProfile.referrals}\n` +
        `${selectedLang === "ru" ? "üéÅ *–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞:* " : "üéÅ *Discount:* "} ${userProfile.discountPercent}*%*\n` +
        `${selectedLang === "ru" ? "üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* " : "üìÖ *Registration:* "} ${userProfile.registrationDate}\n` +
        `üÜî *ID:* \`${userProfile.id}\`\n` +
        `${selectedLang === "ru" ? "üåê *–Ø–∑—ã–∫:* " : "üåê *Lang:* "} ${userProfile.lang}`;
  
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è
      const profileKeyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(selectedLang === "ru" ? "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" : "üíµ Add funds", "replenish_balance"),
          Markup.button.callback(selectedLang === "ru" ? "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" : "üë• Referal system", "referral_system"),
        ],
        [
          Markup.button.callback(selectedLang === "ru" ? "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" : "üîß Technical support", "tech_support"),
          Markup.button.callback(selectedLang === "ru" ? "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞" : "üí∏ Withdrawal funds", "withdraw_funds"),
        ],
        [
          Markup.button.callback(selectedLang === "ru" ? "üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏" : "üõç My purchases", "my_purchases"),
          Markup.button.callback("üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞", selectedLang === "ru" ? "set_lang_en" : "set_lang_ru"),
        ],
      ]);
  
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.replyWithMarkdownV2(profileMessage, profileKeyboard);
    } catch (err) {
      console.error(err);
      ctx.reply(selectedLang === "ru" ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞." : "An error occurred during language change.");
    }
  });


  bot.action(/create_user_(ru|en)/, async (ctx) => {
    const selectedLang = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º 'ru' –∏–ª–∏ 'en' –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
  
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
      await dbHandlers.Users.createUser(userId, userName, selectedLang);
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
      const welcomeMessage = selectedLang === "ru" 
        ? "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" 
        : "Language is set to English. Welcome!";
  
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      const menuKeyboard = getMenuForLang(selectedLang, false);
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      ctx.reply(welcomeMessage, menuKeyboard);
    } catch (err) {
      console.error(err);
      const errorMessage = selectedLang === "ru"
        ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        : "An error occurred during registration.";
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply(errorMessage);
    }
  });
}; // module export
